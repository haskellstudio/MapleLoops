/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/



#include "PluginProcessor.h"
#include "PluginEditor.h"

#include "CefContextJob.h"
#include "Globals.h"

int MapleLoopsAudioProcessorEditor::instanceCount = 0;
CefContextJob *  MapleLoopsAudioProcessorEditor::context_thread = nullptr;
//==============================================================================
MapleLoopsAudioProcessorEditor::MapleLoopsAudioProcessorEditor (MapleLoopsAudioProcessor& p)
	: AudioProcessorEditor(&p), processor(p), myBrowser(nullptr)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (600, 600);
	
	if (processor.cefThreadContextPool != nullptr)
	{
		if (context_thread == nullptr)
		{
			context_thread = new CefContextJob();
			processor.cefThreadContextPool->addJob(context_thread, true);
		}
	}
	instanceCount++;

	
}

MapleLoopsAudioProcessorEditor::~MapleLoopsAudioProcessorEditor()
{
	instanceCount--;
	if (instanceCount==0 &&  context_thread!=nullptr)
	{
		

	}

	myBrowser = nullptr;

}

//==============================================================================
void MapleLoopsAudioProcessorEditor::paint (Graphics& g)
{

	if (myBrowser == nullptr){
		myBrowser = new CefBrowserObject(getPeer()->getNativeHandle());
		context_thread->launchBrowser(myBrowser);
	}
 
}

void MapleLoopsAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
}

void MapleLoopsAudioProcessorEditor::actionListenerCallback(const String& message)
{
		
}
